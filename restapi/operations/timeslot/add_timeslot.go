// Code generated by go-swagger; DO NOT EDIT.

package timeslot

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// AddTimeslotHandlerFunc turns a function with the right signature into a add timeslot handler
type AddTimeslotHandlerFunc func(AddTimeslotParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddTimeslotHandlerFunc) Handle(params AddTimeslotParams) middleware.Responder {
	return fn(params)
}

// AddTimeslotHandler interface for that can handle valid add timeslot params
type AddTimeslotHandler interface {
	Handle(AddTimeslotParams) middleware.Responder
}

// NewAddTimeslot creates a new http.Handler for the add timeslot operation
func NewAddTimeslot(ctx *middleware.Context, handler AddTimeslotHandler) *AddTimeslot {
	return &AddTimeslot{Context: ctx, Handler: handler}
}

/* AddTimeslot swagger:route POST /users/{user_id}/time-slots timeslot addTimeslot

Add new time slot and return time slot id

*/
type AddTimeslot struct {
	Context *middleware.Context
	Handler AddTimeslotHandler
}

func (o *AddTimeslot) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewAddTimeslotParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
